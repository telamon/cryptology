// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var PollMessage = exports.PollMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PollChallenge = exports.PollChallenge = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PollBallot = exports.PollBallot = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PollStatement = exports.PollStatement = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definePollMessage()
definePollChallenge()
definePollBallot()
definePollStatement()

function definePollMessage () {
  PollMessage.encodingLength = encodingLength
  PollMessage.encode = encode
  PollMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.challenge) + +defined(obj.ballot)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.challenge)) {
      var len = PollChallenge.encodingLength(obj.challenge)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.ballot)) {
      var len = PollBallot.encodingLength(obj.ballot)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.challenge) + +defined(obj.ballot)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.challenge)) {
      buf[offset++] = 10
      varint.encode(PollChallenge.encodingLength(obj.challenge), buf, offset)
      offset += varint.encode.bytes
      PollChallenge.encode(obj.challenge, buf, offset)
      offset += PollChallenge.encode.bytes
    }
    if (defined(obj.ballot)) {
      buf[offset++] = 18
      varint.encode(PollBallot.encodingLength(obj.ballot), buf, offset)
      offset += varint.encode.bytes
      PollBallot.encode(obj.ballot, buf, offset)
      offset += PollBallot.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      challenge: null,
      ballot: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.ballot
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.challenge = PollChallenge.decode(buf, offset, offset + len)
        offset += PollChallenge.decode.bytes
        break
        case 2:
        delete obj.challenge
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.ballot = PollBallot.decode(buf, offset, offset + len)
        offset += PollBallot.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePollChallenge () {
  PollChallenge.encodingLength = encodingLength
  PollChallenge.encode = encode
  PollChallenge.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.box_pk)) throw new Error("box_pk is required")
    var len = encodings.bytes.encodingLength(obj.box_pk)
    length += 1 + len
    if (defined(obj.motion)) {
      var len = encodings.string.encodingLength(obj.motion)
      length += 1 + len
    }
    if (defined(obj.options)) {
      for (var i = 0; i < obj.options.length; i++) {
        if (!defined(obj.options[i])) continue
        var len = encodings.string.encodingLength(obj.options[i])
        length += 1 + len
      }
    }
    if (defined(obj.ends_at)) {
      var len = encodings.varint.encodingLength(obj.ends_at)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.box_pk)) throw new Error("box_pk is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.box_pk, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (defined(obj.motion)) {
      buf[offset++] = 18
      encodings.string.encode(obj.motion, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.options)) {
      for (var i = 0; i < obj.options.length; i++) {
        if (!defined(obj.options[i])) continue
        buf[offset++] = 26
        encodings.string.encode(obj.options[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    if (defined(obj.ends_at)) {
      buf[offset++] = 32
      encodings.varint.encode(obj.ends_at, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      box_pk: null,
      motion: "",
      options: [],
      ends_at: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.box_pk = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.motion = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.options.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.ends_at = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePollBallot () {
  PollBallot.encodingLength = encodingLength
  PollBallot.encode = encode
  PollBallot.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.box_msg)) throw new Error("box_msg is required")
    var len = encodings.bytes.encodingLength(obj.box_msg)
    length += 1 + len
    if (!defined(obj.secret_vote)) throw new Error("secret_vote is required")
    var len = encodings.bytes.encodingLength(obj.secret_vote)
    length += 1 + len
    if (!defined(obj.box_pk)) throw new Error("box_pk is required")
    var len = encodings.bytes.encodingLength(obj.box_pk)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.box_msg)) throw new Error("box_msg is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.box_msg, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.secret_vote)) throw new Error("secret_vote is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.secret_vote, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.box_pk)) throw new Error("box_pk is required")
    buf[offset++] = 26
    encodings.bytes.encode(obj.box_pk, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      box_msg: null,
      secret_vote: null,
      box_pk: null
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.box_msg = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.secret_vote = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.box_pk = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePollStatement () {
  PollStatement.encodingLength = encodingLength
  PollStatement.encode = encode
  PollStatement.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.vote)) throw new Error("vote is required")
    var len = encodings.bytes.encodingLength(obj.vote)
    length += 1 + len
    if (!defined(obj.secret_proof)) throw new Error("secret_proof is required")
    var len = encodings.bytes.encodingLength(obj.secret_proof)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.vote)) throw new Error("vote is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.vote, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.secret_proof)) throw new Error("secret_proof is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.secret_proof, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      vote: null,
      secret_proof: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.vote = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.secret_proof = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
